import {
  _defineProperty
} from "./chunk-UYKCXFZP.js";
import "./chunk-LQ2VYIYD.js";

// node_modules/@atlaskit/pragmatic-drag-and-drop-hitbox/dist/esm/closest-edge.js
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var getDistanceToEdge = {
  top: function top(rect, client) {
    return Math.abs(client.y - rect.top);
  },
  right: function right(rect, client) {
    return Math.abs(rect.right - client.x);
  },
  bottom: function bottom(rect, client) {
    return Math.abs(rect.bottom - client.y);
  },
  left: function left(rect, client) {
    return Math.abs(client.x - rect.left);
  }
};
var uniqueKey = Symbol("closestEdge");
function attachClosestEdge(userData, _ref) {
  var _entries$sort$0$edge, _entries$sort$;
  var element = _ref.element, input = _ref.input, allowedEdges = _ref.allowedEdges;
  var client = {
    x: input.clientX,
    y: input.clientY
  };
  var rect = element.getBoundingClientRect();
  var entries = allowedEdges.map(function(edge) {
    return {
      edge,
      value: getDistanceToEdge[edge](rect, client)
    };
  });
  var addClosestEdge = (_entries$sort$0$edge = (_entries$sort$ = entries.sort(function(a, b) {
    return a.value - b.value;
  })[0]) === null || _entries$sort$ === void 0 ? void 0 : _entries$sort$.edge) !== null && _entries$sort$0$edge !== void 0 ? _entries$sort$0$edge : null;
  return _objectSpread(_objectSpread({}, userData), {}, _defineProperty({}, uniqueKey, addClosestEdge));
}
function extractClosestEdge(userData) {
  var _ref2;
  return (_ref2 = userData[uniqueKey]) !== null && _ref2 !== void 0 ? _ref2 : null;
}
export {
  attachClosestEdge,
  extractClosestEdge
};
//# sourceMappingURL=@atlaskit_pragmatic-drag-and-drop-hitbox_closest-edge.js.map
